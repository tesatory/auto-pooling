options = struct;
options.Method = 'lbfgs'; 
options.maxIter = 400;
options.display = 'on';


sparsityParam = 0.035; % desired average activation of the hidden units.
lambda = 3e-3;         % weight decay parameter       

beta = 1;              % weight of sparsity penalty term   
[optTheta1, cost] = minFunc( @(p) sparseAutoencoderLinearCost(p, ...
                                   visibleSize, hiddenSize, ...
                                   lambda, sparsityParam, ...
                                   beta, train_data'), ...
                              theta, options);

beta = 2;              % weight of sparsity penalty term   
[optTheta2, cost] = minFunc( @(p) sparseAutoencoderLinearCost(p, ...
                                   visibleSize, hiddenSize, ...
                                   lambda, sparsityParam, ...
                                   beta, train_data'), ...
                              theta, options);

beta = 3;              % weight of sparsity penalty term   
[optTheta3, cost] = minFunc( @(p) sparseAutoencoderLinearCost(p, ...
                                   visibleSize, hiddenSize, ...
                                   lambda, sparsityParam, ...
                                   beta, train_data'), ...
                              theta, options);

beta = 5;              % weight of sparsity penalty term   
[optTheta5, cost] = minFunc( @(p) sparseAutoencoderLinearCost(p, ...
                                   visibleSize, hiddenSize, ...
                                   lambda, sparsityParam, ...
                                   beta, train_data'), ...
                              theta, options);
                          
beta = 7;              % weight of sparsity penalty term   
[optTheta7, cost] = minFunc( @(p) sparseAutoencoderLinearCost(p, ...
                                   visibleSize, hiddenSize, ...
                                   lambda, sparsityParam, ...
                                   beta, train_data'), ...
                              theta, options);
                          
beta = 10;              % weight of sparsity penalty term   
[optTheta10, cost] = minFunc( @(p) sparseAutoencoderLinearCost(p, ...
                                   visibleSize, hiddenSize, ...
                                   lambda, sparsityParam, ...
                                   beta, train_data'), ...
                              theta, options);